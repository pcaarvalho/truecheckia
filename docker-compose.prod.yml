# =============================================================================
# Docker Compose - Production Environment
# =============================================================================

version: '3.8'

networks:
  truecheckia-prod:
    driver: bridge
    name: truecheckia-production

volumes:
  postgres_data:
    driver: local
    name: truecheckia_postgres_prod
  minio_data:
    driver: local
    name: truecheckia_minio_prod
  redis_data:
    driver: local
    name: truecheckia_redis_prod

services:
  # =============================================================================
  # DATABASE - PostgreSQL
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: truecheckia-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - truecheckia-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # =============================================================================
  # CACHE - Redis
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: truecheckia-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - truecheckia-prod
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # =============================================================================
  # STORAGE - MinIO
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: truecheckia-minio-prod
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_DEFAULT_BUCKETS: ${MINIO_BUCKET}
    volumes:
      - minio_data:/data
    networks:
      - truecheckia-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # =============================================================================
  # BACKEND - Node.js API
  # =============================================================================
  backend:
    image: ${REGISTRY}/truecheckia/backend:${IMAGE_TAG:-latest}
    container_name: truecheckia-backend-prod
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # MinIO
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_USE_SSL: "false"
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      
      # API Keys
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
      # Server
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      
      # Features
      SKIP_REDIS: false
      SKIP_MINIO: false
      SKIP_AI_DETECTION: false
      
      # Seeding
      SEED_DATABASE: ${SEED_DATABASE:-false}
    networks:
      - truecheckia-prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # =============================================================================
  # FRONTEND - React SPA
  # =============================================================================
  frontend:
    image: ${REGISTRY}/truecheckia/frontend:${IMAGE_TAG:-latest}
    container_name: truecheckia-frontend-prod
    restart: unless-stopped
    networks:
      - truecheckia-prod
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # =============================================================================
  # REVERSE PROXY - Nginx
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: truecheckia-nginx-prod
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/prod/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/prod/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - /var/log/nginx:/var/log/nginx
    networks:
      - truecheckia-prod
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # =============================================================================
  # MONITORING (Optional)
  # =============================================================================
  watchtower:
    image: containrrr/watchtower
    container_name: truecheckia-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_INCLUDE_RESTARTING: "true"
      WATCHTOWER_POLL_INTERVAL: 300
      WATCHTOWER_NOTIFICATIONS: slack
      WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL: ${SLACK_WEBHOOK_URL}
      WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER: TrueCheckIA-Production
    command: --interval 300 --cleanup