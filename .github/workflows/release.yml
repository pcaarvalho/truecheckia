name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  # =============================================================================
  # CREATE RELEASE
  # =============================================================================
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
          fi
        else
          CHANGELOG="Release created manually from workflow dispatch"
        fi
        
        # Save changelog to file
        cat > CHANGELOG.md << EOF
        ## What's Changed
        
        $CHANGELOG
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...${{ steps.version.outputs.version }}
        EOF

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  # =============================================================================
  # BUILD & PUBLISH RELEASE IMAGES
  # =============================================================================
  build-release-images:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/truecheckia/${{ matrix.component }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.create-release.outputs.version }}
          type=raw,value=stable

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.component }}
        file: ${{ matrix.component }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VITE_API_URL=/api
          VITE_APP_NAME=TrueCheckIA
          VITE_APP_VERSION=${{ needs.create-release.outputs.version }}

  # =============================================================================
  # DEPLOY RELEASE TO PRODUCTION
  # =============================================================================
  deploy-release:
    name: Deploy Release to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-release-images]
    environment: production
    if: ${{ !contains(needs.create-release.outputs.version, '-') }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: Create production backup
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} '
          cd /opt/truecheckia &&
          docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump -U $POSTGRES_USER $POSTGRES_DB > backup-release-${{ needs.create-release.outputs.version }}-$(date +%Y%m%d-%H%M%S).sql
        '

    - name: Deploy release to production
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} '
          cd /opt/truecheckia &&
          git fetch origin &&
          git checkout ${{ needs.create-release.outputs.version }} &&
          export IMAGE_TAG=${{ needs.create-release.outputs.version }} &&
          docker-compose -f docker-compose.prod.yml pull &&
          docker-compose -f docker-compose.prod.yml down &&
          docker-compose -f docker-compose.prod.yml up -d &&
          docker system prune -f
        '

    - name: Health check
      run: |
        sleep 90
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

    - name: Run release verification tests
      run: |
        echo "Running release verification tests..."
        # Testes específicos para verificar a release
        curl -f ${{ secrets.PRODUCTION_URL }}/api-docs || exit 1

    - name: Notify successful release deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🎉 Release ${{ needs.create-release.outputs.version }} deployed to production!
          
          🚀 URL: ${{ secrets.PRODUCTION_URL }}
          📦 Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}
          
          ✅ All health checks passed
          ✅ Database backup created
          ✅ Verification tests successful
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify failed release deployment
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ Release ${{ needs.create-release.outputs.version }} deployment failed!
          
          📦 Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}
          
          Please check the deployment logs and consider rolling back.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # =============================================================================
  # UPDATE RELEASE DOCUMENTATION
  # =============================================================================
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [create-release, deploy-release]
    if: always() && needs.create-release.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update CHANGELOG
      run: |
        # Update main CHANGELOG.md with release info
        echo "## [${{ needs.create-release.outputs.version }}] - $(date +%Y-%m-%d)" > TEMP_CHANGELOG.md
        cat CHANGELOG.md >> TEMP_CHANGELOG.md
        mv TEMP_CHANGELOG.md CHANGELOG.md

    - name: Update version in package.json files
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        VERSION_NUMBER=${VERSION#v}
        
        # Update backend package.json
        jq --arg version "$VERSION_NUMBER" '.version = $version' backend/package.json > backend/package.json.tmp
        mv backend/package.json.tmp backend/package.json
        
        # Update frontend package.json
        jq --arg version "$VERSION_NUMBER" '.version = $version' frontend/package.json > frontend/package.json.tmp
        mv frontend/package.json.tmp frontend/package.json
        
        # Update root package.json
        jq --arg version "$VERSION_NUMBER" '.version = $version' package.json > package.json.tmp
        mv package.json.tmp package.json

    - name: Create documentation update PR
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "docs: update version to ${{ needs.create-release.outputs.version }}"
        title: "docs: update version and changelog for ${{ needs.create-release.outputs.version }}"
        body: |
          Automated documentation update for release ${{ needs.create-release.outputs.version }}
          
          - Updated version in package.json files
          - Updated CHANGELOG.md
        branch: docs/release-${{ needs.create-release.outputs.version }}
        delete-branch: true