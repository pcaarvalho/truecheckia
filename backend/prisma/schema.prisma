// This is your Prisma schema file for PostgreSQL development,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("USER") // ADMIN, USER, PREMIUM
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  analyses      Analysis[]
  reports       Report[]
  apiKeys       ApiKey[]
  userPlan      UserPlan?
  usageLogs     UsageLog[]
  subscriptions Subscription[]
}

model Plan {
  id            String    @id @default(cuid())
  name          String    @unique // FREE, STARTER, PRO, ENTERPRISE
  displayName   String    // Nome para exibição
  description   String
  price         Float     // Preço mensal
  currency      String    @default("BRL")
  maxAnalyses   Int       // Análises por mês
  maxFileSize   Int       // em MB
  maxVideoLength Int      // em minutos
  maxReports    Int       // Relatórios por mês
  features      String    // JSON com recursos
  isActive      Boolean   @default(true)
  sortOrder     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos
  userPlans     UserPlan[]
  subscriptions Subscription[]
}

model UserPlan {
  id                String    @id @default(cuid())
  userId            String    @unique
  planId            String
  planType          String    // Cache do nome do plano
  status            String    @default("ACTIVE") // ACTIVE, TRIAL, EXPIRED, CANCELLED
  isTrialUsed       Boolean   @default(false)
  trialEndsAt       DateTime? // Data de fim do trial
  currentPeriodStart DateTime  @default(now())
  currentPeriodEnd  DateTime? // Fim do período atual
  analysesUsed      Int       @default(0) // Contador mensal
  reportsUsed       Int       @default(0) // Contador mensal
  lastResetDate     DateTime  @default(now()) // Última vez que os contadores foram zerados
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relacionamentos
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan          Plan           @relation(fields: [planId], references: [id])
  subscriptions Subscription[]
}

model Subscription {
  id               String    @id @default(cuid())
  userId           String
  userPlanId       String
  planId           String
  status           String    // ACTIVE, CANCELLED, EXPIRED, PAST_DUE
  paymentMethod    String?   // CREDIT_CARD, PIX, BOLETO
  paymentProvider  String?   // STRIPE, MERCADOPAGO, etc
  externalId       String?   // ID no provedor de pagamento
  amount           Float
  currency         String    @default("BRL")
  interval         String    @default("MONTHLY") // MONTHLY, YEARLY
  startDate        DateTime
  endDate          DateTime?
  cancelledAt      DateTime?
  cancelReason     String?
  metadata         String?   // JSON com dados adicionais
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relacionamentos
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userPlan UserPlan @relation(fields: [userPlanId], references: [id])
  plan     Plan     @relation(fields: [planId], references: [id])
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  name      String
  key       String   @unique
  isActive  Boolean  @default(true)
  lastUsed  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analysis {
  id          String   @id @default(cuid())
  userId      String
  title       String?
  description String?
  contentType String   // TEXT, VIDEO, IMAGE, AUDIO
  fileUrl     String?
  textContent String?
  status      String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  confidence  Float?   // Score de 0-100
  isAIGenerated Boolean?
  metadata    String?  // JSON como string para SQLite
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  results  AnalysisResult[]
  reports  Report[]
}

model AnalysisResult {
  id         String   @id @default(cuid())
  analysisId String
  provider   String   // GPTZero, DetectGPT, Hive, etc.
  confidence Float    // Score de 0-100
  isAIGenerated Boolean
  details    String?  // JSON como string para SQLite
  processingTime Int? // Tempo de processamento em ms
  createdAt  DateTime @default(now())

  // Relacionamentos
  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
}

model Report {
  id         String   @id @default(cuid())
  userId     String
  analysisId String?
  title      String
  content    String   // Conteúdo do relatório em HTML/Markdown
  type       String   // ANALYSIS_SUMMARY, DETAILED_REPORT, COMPARISON_REPORT, TREND_ANALYSIS
  data       String?  // JSON como string para SQLite
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacionamentos
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis Analysis? @relation(fields: [analysisId], references: [id], onDelete: SetNull)
}

model UsageLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // CREATE_ANALYSIS, GENERATE_REPORT, etc.
  metadata  String?  // JSON como string para SQLite
  createdAt DateTime @default(now())

  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
} 