# Script de setup para o TrueCheckIA Backend (PowerShell)
Write-Host "üöÄ Configurando TrueCheckIA Backend..." -ForegroundColor Green

# Verificar se o Node.js est√° instalado
if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Node.js n√£o encontrado. Por favor, instale o Node.js 18+" -ForegroundColor Red
    exit 1
}

# Verificar se o npm est√° instalado
if (-not (Get-Command npm -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå npm n√£o encontrado. Por favor, instale o npm" -ForegroundColor Red
    exit 1
}

# Verificar vers√£o do Node.js
$nodeVersion = (node -v) -replace 'v', ''
$majorVersion = $nodeVersion.Split('.')[0]
if ([int]$majorVersion -lt 18) {
    Write-Host "‚ùå Node.js vers√£o 18+ √© necess√°ria. Vers√£o atual: $(node -v)" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Node.js $(node -v) encontrado" -ForegroundColor Green

# Instalar depend√™ncias
Write-Host "üì¶ Instalando depend√™ncias..." -ForegroundColor Yellow
npm install

# Verificar se o Docker est√° instalado
if (Get-Command docker -ErrorAction SilentlyContinue) {
    Write-Host "üê≥ Docker encontrado. Iniciando servi√ßos..." -ForegroundColor Yellow
    docker-compose -f docker-compose.dev.yml up -d
    
    Write-Host "‚è≥ Aguardando servi√ßos ficarem prontos..." -ForegroundColor Yellow
    Start-Sleep -Seconds 10
} else {
    Write-Host "‚ö†Ô∏è  Docker n√£o encontrado. Certifique-se de ter PostgreSQL e Redis rodando localmente" -ForegroundColor Yellow
}

# Copiar arquivo de ambiente se n√£o existir
if (-not (Test-Path .env)) {
    Write-Host "üìù Criando arquivo .env..." -ForegroundColor Yellow
    @"
# Ambiente
NODE_ENV=development

# Servidor
PORT=5000

# Banco de Dados
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/truecheckia_dev"

# Redis
REDIS_URL="redis://localhost:6379"

# JWT
JWT_SECRET="your-super-secret-jwt-key-minimum-32-characters-long"
JWT_REFRESH_SECRET="your-super-secret-jwt-refresh-key-minimum-32-characters-long"
JWT_EXPIRES_IN="1h"
JWT_REFRESH_EXPIRES_IN="7d"

# MinIO
MINIO_ENDPOINT="localhost"
MINIO_PORT=9000
MINIO_ACCESS_KEY="minioadmin"
MINIO_SECRET_KEY="minioadmin"
MINIO_BUCKET="truecheckia"
MINIO_USE_SSL=false

# CORS
CORS_ORIGIN="*"

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX=100
"@ | Out-File -FilePath .env -Encoding UTF8
    Write-Host "‚úÖ Arquivo .env criado" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Arquivo .env j√° existe" -ForegroundColor Green
}

# Gerar cliente Prisma
Write-Host "üîß Gerando cliente Prisma..." -ForegroundColor Yellow
npm run prisma:generate

# Executar migra√ß√µes
Write-Host "üóÑÔ∏è  Executando migra√ß√µes..." -ForegroundColor Yellow
npm run prisma:migrate

# Instalar Husky
Write-Host "üêï Configurando Husky..." -ForegroundColor Yellow
npm run prepare

Write-Host "‚úÖ Setup conclu√≠do!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "1. Edite o arquivo .env com suas configura√ß√µes"
Write-Host "2. Execute 'npm run dev' para iniciar o servidor"
Write-Host "3. Acesse http://localhost:5000/api-docs para ver a documenta√ß√£o"
Write-Host ""
Write-Host "üîß Scripts √∫teis:" -ForegroundColor Cyan
Write-Host "- npm run dev: Iniciar servidor de desenvolvimento"
Write-Host "- npm run test: Executar testes"
Write-Host "- npm run lint: Verificar c√≥digo"
Write-Host "- npm run db:studio: Abrir Prisma Studio" 